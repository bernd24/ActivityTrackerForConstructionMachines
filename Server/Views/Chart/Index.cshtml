@{
    ViewData["Title"] = "Home";
}

    <h1>@ViewData["Title"] - chart testsite</h1>

@* ******************google charts****************** https://developers.google.com/chart?hl=de *@

<div id="curve_chart" style="width: 900px; height: 500px"></div>
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">
    google.charts.load('current', {'packages':['corechart']});
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
    var data = google.visualization.arrayToDataTable([
        ['Year', 'Sales', 'Expenses'],
        ['2004',  1000,      400],
        ['2005',  1170,      460],
        ['2006',  660,       1120],
        ['2007',  1030,      540]
    ]);

    var options = {
        title: 'Company Performance',
        curveType: 'function',
        legend: { position: 'bottom' }
    };

    var chart = new google.visualization.LineChart(document.getElementById('curve_chart'));

    chart.draw(data, options);
    }
</script>

@* ******************chart.js******************  https://www.chartjs.org/docs/latest/ *@

<div>
  <canvas id="myChart" style="width: 900px; height: 500px"></canvas>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    const labels = [0,1,2,3,4,5,6,7,8,9,10,11,12];


    const datapoints = [0, 20, 20, 60, 60, 120, NaN, 180, 120, 125, 105, 110, 170];
    const data = {
    labels: labels,
    datasets: [
        {
        label: 'Cubic interpolation (monotone)',
        data: datapoints,
        borderColor: 'rgb(100, 99, 132)',
         @* borderColor: Utils.CHART_COLORS.blue,     this shit is not working  Utils file is not there https://github.com/chartjs/Chart.js/blob/master/docs/scripts/utils.js*@  
         @* i dont think we need that *@
        fill: false,
        cubicInterpolationMode: 'monotone',
        tension: 0.4
        }, {
        label: 'Cubic interpolation',
        data: datapoints,
        borderColor: 'rgb(255, 99, 132)',
        fill: false,
        tension: 0.4
        }, {
        label: 'Linear interpolation (default)',
        data: datapoints,
        borderColor: 'rgb(200, 99, 50)',
        fill: false
        }
    ]
    };

  const config = {
    type: 'line',
    data: data,
    options: {}
  };

</script>

<script>
  const myChart = new Chart(
    document.getElementById('myChart'),
    config 
  );
</script> 



@* ***************** Chartist ************* https://gionkunz.github.io/chartist-js/index.html *@
 
  <script src="//cdn.jsdelivr.net/chartist.js/latest/chartist.min.js"></script>
  <link href="//cdn.jsdelivr.net/chartist.js/latest/chartist.min.css" rel="stylesheet" type="text/css" />
  @* <meta charset="utf-8"> *@
  <title>Chartist | Simple line chart</title>
  <div class="ct-chart" ></div>
<script>
  
new Chartist.Line('.ct-chart', {
  labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'],
  series: [
    [2, 3, 2, 4, 5],
    [0, 2.5, 3, 2, 3],
    [1, 2, 2.5, 3.5, 4]
  ]
}, {
  width: 900,
  height: 500
});

</script>




@* ****************ECHART******************* https://echarts.apache.org/en/index.html *@

@* should work but it doesnt  *@

<title>test</title>
<div id="chart1" style="width: 900px; height: 500px"></div>
<script src="echarts/dist/echarts.js"></script>
<script>


var chartDom = document.getElementById('chart1');
var myChart = echarts.init(chartDom);
var option;

option = {
  xAxis: {
    type: 'category',
    data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
  },
  yAxis: {
    type: 'value'
  },
  series: [
    {
      data: [150, 230, 224, 218, 135, 147, 260],
      type: 'line'
    }
  ]
};

option && myChart.setOption(option);

</script>







































  <script src="https://vega.github.io/vega/vega.min.js">
{
  "$schema": "https://vega.github.io/schema/vega/v5.json",
  "description": "A basic line chart example.",
  "width": 500,
  "height": 200,
  "padding": 5,

  "signals": [
    {
      "name": "interpolate",
      "value": "linear",
      "bind": {
        "input": "select",
        "options": [
          "basis",
          "cardinal",
          "catmull-rom",
          "linear",
          "monotone",
          "natural",
          "step",
          "step-after",
          "step-before"
        ]
      }
    }
  ],

  "data": [
    {
      "name": "table",
      "values": [
        {"x": 0, "y": 28, "c":0}, {"x": 0, "y": 20, "c":1},
        {"x": 1, "y": 43, "c":0}, {"x": 1, "y": 35, "c":1},
        {"x": 2, "y": 81, "c":0}, {"x": 2, "y": 10, "c":1},
        {"x": 3, "y": 19, "c":0}, {"x": 3, "y": 15, "c":1},
        {"x": 4, "y": 52, "c":0}, {"x": 4, "y": 48, "c":1},
        {"x": 5, "y": 24, "c":0}, {"x": 5, "y": 28, "c":1},
        {"x": 6, "y": 87, "c":0}, {"x": 6, "y": 66, "c":1},
        {"x": 7, "y": 17, "c":0}, {"x": 7, "y": 27, "c":1},
        {"x": 8, "y": 68, "c":0}, {"x": 8, "y": 16, "c":1},
        {"x": 9, "y": 49, "c":0}, {"x": 9, "y": 25, "c":1}
      ]
    }
  ],

  "scales": [
    {
      "name": "x",
      "type": "point",
      "range": "width",
      "domain": {"data": "table", "field": "x"}
    },
    {
      "name": "y",
      "type": "linear",
      "range": "height",
      "nice": true,
      "zero": true,
      "domain": {"data": "table", "field": "y"}
    },
    {
      "name": "color",
      "type": "ordinal",
      "range": "category",
      "domain": {"data": "table", "field": "c"}
    }
  ],

  "axes": [
    {"orient": "bottom", "scale": "x"},
    {"orient": "left", "scale": "y"}
  ],

  "marks": [
    {
      "type": "group",
      "from": {
        "facet": {
          "name": "series",
          "data": "table",
          "groupby": "c"
        }
      },
      "marks": [
        {
          "type": "line",
          "from": {"data": "series"},
          "encode": {
            "enter": {
              "x": {"scale": "x", "field": "x"},
              "y": {"scale": "y", "field": "y"},
              "stroke": {"scale": "color", "field": "c"},
              "strokeWidth": {"value": 2}
            },
            "update": {
              "interpolate": {"signal": "interpolate"},
              "strokeOpacity": {"value": 1}
            },
            "hover": {
              "strokeOpacity": {"value": 0.5}
            }
          }
        }
      ]
    }
  ]
}

  var vega = require('vega');

    // create a new view instance for a given Vega JSON spec
    var view = new vega.View(vega.parse(spec), {renderer: 'none'});

    // generate a static SVG image
    view.toSVG()
    .then(function(svg) {
        // process svg string
    })
    .catch(function(err) { console.error(err); });

    // generate a static PNG image
    view.toCanvas()
    .then(function(canvas) {
        // process node-canvas instance
        // for example, generate a PNG stream to write
        var stream = canvas.createPNGStream();
    })
    .catch(function(err) { console.error(err); });

</script>








